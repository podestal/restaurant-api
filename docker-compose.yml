version: "3.8"
services:
  app:
    build: .
    volumes:
      - ./app:/app
    ports:
      - 8000:8000
    command: >+
      sh -c "python manage.py wait_for_db &&
            python manage.py migrate &&
            daphne -b 0.0.0.0 -p 8000 restaurant.asgi:application"
            
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DJANGO_CORS_ALLOWED_ORIGINS=${DJANGO_CORS_ALLOWED_ORIGINS}
      - DJANGO_CSRF_TRUSTED_ORIGINS=${DJANGO_CSRF_TRUSTED_ORIGINS}
      - ENVIRONMENT=${ENVIRONMENT}
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}

  nginx:
    build: ./nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt
    image: nginx:latest
    links:
      - app
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
    entrypoint: >+
      sh -c 'if [ "$ENVIRONMENT" = "production" ]; then
              cp /etc/nginx/conf.d/nginx.conf /etc/nginx/nginx.conf;
             else
              cp /etc/nginx/conf.d/nginx-dev.conf /etc/nginx/nginx.conf;
             fi &&
             nginx -g "daemon off;"'

  redis:
    image: redis:6-alpine
    restart: always
    ports:
      - 6379:6379

volumes:
  dev-db-data:
